# coding=utf-8
"""
迪科斯特拉算法 用于计算加权图的最短路径 注意不能有负权边


使用贪婪算法（question：暂时还不知道什么意思）的思想 来找到最权
例图：
    --6--> A   ------------->
          ⬆️                ↘️ 1
起点      ⬆️ 3                 终点
         ⬆️                 ↗️ 5
   --2--> B   -------------->

维护两张表
1。 一张是 costs 花费表 表示起点到目标节点需要花费的时间
    从起点开始 更新到达各个节点的时间 默认设置为无穷大
    有一个参数为是否已经处理 下面讲
|节点|最短路径|[是否已经处理|]
-------------
|A|∞|[processed|]
------
|B|∞|[processed|]
------
|end|∞|[processed|]
2。另一张表是父节点表 parent表示到达各个节点的父节点
|节点|父节点|
-------------
|A|None|
------
|B|None|
------
|end|None|

什么需要这两张表呢，第一张表 记录着到达各个节点需要的时间，从起点开始 我们就知道 下图
|节点|最短路径|是否已经处理|
-------------
|A|6||
------
|B|2||
------
|end|∞||

dijkstra 算法要求我们这么做：
1. 从起点开始
2. 计算所有邻居的距离更新costs表，然后将其状态置为已处理， 然后找到最短的邻居
3. 继续进行2 算法（如果没有了 说明搜索结束 退出）

为什么这样就能实现呢：

"""

